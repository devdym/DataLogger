package datalogger;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

public class DataLogger extends javax.swing.JFrame {
    private int ODIMPort_Value, SealPort_Value, AEPort_Value;
    private String SealIP_Value;
    private ODIMMsgReader ODRSS;
    private SealMsgReader CS;
    private AEMsgReader AERSS;
    private NavMsgReader NavData;
    boolean forward;
    public static String MySQLDB_IP, USERNAME, PASSWORD;
    static String CONN_STRING;
    Properties props = new Properties();
    ArrayList<String> cols = new ArrayList<>();
    ArrayList<ArrayList<String>> data = new ArrayList<>();
    
    public DataLogger() {
        initComponents();
        
        if(checkPrefFile()){
            if(checkForServer()){
                if(checkForDB()){
                    SealStart.setEnabled(true);
                    ODIMStart.setEnabled(true);
                    NavStart.setEnabled(true);
                    //Connect.setEnabled(true);
                   // checkSchedule();
                    checkEvents_and_Proceudre();
                } else {
                    int responce = JOptionPane.showConfirmDialog(null, "Database dosnt exist. Would you like to create new Database.", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if(responce == JOptionPane.NO_OPTION){
                        Log.append("Database doesnt exist");
                    } else if (responce == JOptionPane.YES_OPTION){
                        try {
                            CreateDB();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else if (responce == JOptionPane.CLOSED_OPTION){
                        Log.append("Database doesnt exist");
                    }
                }
            } else {
                Connect.setEnabled(true);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        ODIMStart = new javax.swing.JButton();
        ODIMPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ODIMStop = new javax.swing.JButton();
        ODIMDataLogLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        SealIP = new javax.swing.JTextField();
        SealPort = new javax.swing.JTextField();
        SealStart = new javax.swing.JButton();
        SealStop = new javax.swing.JButton();
        SealDataLogLabel = new javax.swing.JLabel();
        ForwardCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        NavStart = new javax.swing.JButton();
        NavStopButton = new javax.swing.JButton();
        NavURLField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        NavDataLogging = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Log = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        DB_IP = new javax.swing.JTextField();
        DB_Uname = new javax.swing.JTextField();
        DB_Pass = new javax.swing.JTextField();
        ScheduleLabel = new javax.swing.JLabel();
        Connect = new javax.swing.JButton();
        SchemaLabel = new javax.swing.JLabel();
        EventLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        AEPort = new javax.swing.JTextField();
        AEStart = new javax.swing.JButton();
        AEStop = new javax.swing.JButton();
        AEDataLabel = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ODIM DataLogger"));

        ODIMStart.setText("Start");
        ODIMStart.setEnabled(false);
        ODIMStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ODIMStartActionPerformed(evt);
            }
        });

        ODIMPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ODIMPortActionPerformed(evt);
            }
        });
        ODIMPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ODIMPortKeyReleased(evt);
            }
        });

        jLabel2.setText("Port:");

        ODIMStop.setText("Stop");
        ODIMStop.setEnabled(false);
        ODIMStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ODIMStopActionPerformed(evt);
            }
        });

        ODIMDataLogLabel.setText("Data Logging");
        ODIMDataLogLabel.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ODIMStart, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ODIMStop, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ODIMPort, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ODIMDataLogLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ODIMPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ODIMStart)
                    .addComponent(ODIMStop)
                    .addComponent(ODIMDataLogLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Seal 428 DataLogger"));

        jLabel3.setText("IP Address:");

        jLabel4.setText("Port:");

        SealIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SealIPKeyReleased(evt);
            }
        });

        SealPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SealPortKeyReleased(evt);
            }
        });

        SealStart.setText("Start");
        SealStart.setEnabled(false);
        SealStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SealStartActionPerformed(evt);
            }
        });

        SealStop.setText("Stop");
        SealStop.setEnabled(false);
        SealStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SealStopActionPerformed(evt);
            }
        });

        SealDataLogLabel.setText("Data Logging");
        SealDataLogLabel.setEnabled(false);

        ForwardCheckBox.setText("Forward Seal Msg");

        jLabel6.setText("Port");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(SealStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(8, 8, 8)
                                .addComponent(SealStop, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SealIP, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(14, 14, 14)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SealDataLogLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SealPort)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ForwardCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(SealIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(SealPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SealStart)
                    .addComponent(SealStop)
                    .addComponent(SealDataLogLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ForwardCheckBox))
                .addGap(137, 137, 137))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));
        jPanel3.setToolTipText("");

        NavStart.setText("Start");
        NavStart.setEnabled(false);
        NavStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NavStartActionPerformed(evt);
            }
        });

        NavStopButton.setText("Stop");
        NavStopButton.setEnabled(false);
        NavStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NavStopButtonActionPerformed(evt);
            }
        });

        NavURLField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NavURLFieldKeyReleased(evt);
            }
        });

        jLabel1.setText("URL:");

        NavDataLogging.setText("Data Logging");
        NavDataLogging.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NavURLField))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(NavStart, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NavStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NavDataLogging)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NavURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NavStart)
                    .addComponent(NavStopButton)
                    .addComponent(NavDataLogging))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        Log.setColumns(20);
        Log.setRows(5);
        jScrollPane1.setViewportView(Log);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("DataBase"));

        jLabel5.setText("IP Adress: ");

        jLabel7.setText("User Name: ");

        jLabel8.setText("Password: ");

        DB_IP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DB_IPActionPerformed(evt);
            }
        });
        DB_IP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                DB_IPKeyReleased(evt);
            }
        });

        DB_Uname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                DB_UnameKeyReleased(evt);
            }
        });

        DB_Pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                DB_PassKeyReleased(evt);
            }
        });

        ScheduleLabel.setText("Event Schedule Status");

        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectActionPerformed(evt);
            }
        });

        SchemaLabel.setText("Database Schema");
        SchemaLabel.setEnabled(false);

        EventLabel.setText("Database Events");
        EventLabel.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DB_IP, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(DB_Uname))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScheduleLabel)
                            .addComponent(SchemaLabel)
                            .addComponent(EventLabel)
                            .addComponent(Connect, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DB_Pass, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DB_IP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(ScheduleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DB_Uname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(SchemaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DB_Pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(EventLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Connect)
                .addContainerGap(310, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Data Base", jPanel5);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("DB Log"));

        jScrollPane5.setViewportView(jTable2);

        jButton1.setText("Reload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap(526, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Event Log", jPanel4);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(" AE "));

        jLabel9.setText("Port: ");

        AEPort.setText("2000");
        AEPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEPortActionPerformed(evt);
            }
        });
        AEPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AEPortKeyReleased(evt);
            }
        });

        AEStart.setText("Start");
        AEStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEStartActionPerformed(evt);
            }
        });

        AEStop.setText("Stop");
        AEStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEStopActionPerformed(evt);
            }
        });

        AEDataLabel.setText("Data Logging");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(AEPort, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(AEStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEStop)
                        .addGap(18, 18, 18)
                        .addComponent(AEDataLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(AEPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEStart)
                    .addComponent(AEStop)
                    .addComponent(AEDataLabel))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ODIMStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ODIMStartActionPerformed
        //GUI work
        ODIMStop.setEnabled(true);
        ODIMStart.setEnabled(false);
        Log.append("ODIM Data logging is started.\n");
        ODIMPort.setEnabled(false);
        ODIMDataLogLabel.setEnabled(true);
        //Start thread ODIM message reader
        ODRSS = new ODIMMsgReader(ODIMPort_Value);
        ODRSS.start();
    }//GEN-LAST:event_ODIMStartActionPerformed

    private void SealStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SealStartActionPerformed
        //GUI work
        SealStop.setEnabled(true);
        SealStart.setEnabled(false);
        SealPort.setEnabled(false);
        SealIP.setEnabled(false);
        Log.append("Seal Data logging is started.\n");
        SealDataLogLabel.setEnabled(true);
        //Start thread Seal message reader
        forward = ForwardCheckBox.isSelected();
        CS = new SealMsgReader(SealIP_Value, SealPort_Value, forward);
        CS.start();
    }//GEN-LAST:event_SealStartActionPerformed

    private void ODIMStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ODIMStopActionPerformed
        //GUI work
        ODIMStop.setEnabled(false);
        ODIMStart.setEnabled(true);
        ODIMPort.setEnabled(true);
        Log.append("ODIM Data logging is stopped.\n");
        ODIMDataLogLabel.setEnabled(false);
        //Stop
        ODRSS.done = false;
    }//GEN-LAST:event_ODIMStopActionPerformed

    private void SealStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SealStopActionPerformed
        //GUI work
        SealStop.setEnabled(false);
        SealStart.setEnabled(true);
        SealPort.setEnabled(true);
        SealIP.setEnabled(true);
        Log.append("Seal Data logging is stopped.\n");
        SealDataLogLabel.setEnabled(false);
        //Stop
        CS.done = false;
    }//GEN-LAST:event_SealStopActionPerformed

    private void NavStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NavStartActionPerformed
        NavStart.setEnabled(false);
        NavStopButton.setEnabled(true);
        NavDataLogging.setEnabled(true);
        NavData = new NavMsgReader(NavURLField.getText());
        NavData.start();
    }//GEN-LAST:event_NavStartActionPerformed

    private void NavStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NavStopButtonActionPerformed
        NavStart.setEnabled(true);
        NavStopButton.setEnabled(false);
        NavDataLogging.setEnabled(false);
        NavData.done = false;
    }//GEN-LAST:event_NavStopButtonActionPerformed

    private void DB_UnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DB_UnameKeyReleased
        props.put("username", DB_Uname.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        getProperties();
    }//GEN-LAST:event_DB_UnameKeyReleased

    private void DB_PassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DB_PassKeyReleased
        props.put("password", DB_Pass.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        getProperties();
    }//GEN-LAST:event_DB_PassKeyReleased

    private void SealIPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SealIPKeyReleased
        props.put("Seal_IP", SealIP.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        getProperties();
    }//GEN-LAST:event_SealIPKeyReleased

    private void SealPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SealPortKeyReleased
        props.put("Seal_port", SealPort.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        getProperties();
    }//GEN-LAST:event_SealPortKeyReleased

    private void ODIMPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ODIMPortKeyReleased
        props.put("ODIMPort", ODIMPort.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
         getProperties();
    }//GEN-LAST:event_ODIMPortKeyReleased

    private void NavURLFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NavURLFieldKeyReleased
        props.put("NavURL", NavURLField.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        getProperties();
    }//GEN-LAST:event_NavURLFieldKeyReleased

    private void DB_IPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DB_IPKeyReleased
        props.put("IP", DB_IP.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        getProperties();
    }//GEN-LAST:event_DB_IPKeyReleased

    private void ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectActionPerformed
        if(checkPrefFile()){
            if(checkForServer()){
                if(checkForDB()){
                    SealStart.setEnabled(true);
                    ODIMStart.setEnabled(true);
                    NavStart.setEnabled(true);
                    checkEvents_and_Proceudre();
                } else {
                    int responce = JOptionPane.showConfirmDialog(null, "Database dosnt exist. Would you like to create new Database.", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if(responce == JOptionPane.NO_OPTION){
                        Log.append("Database doesnt exist");
                    } else if (responce == JOptionPane.YES_OPTION){
                        try {
                            CreateDB();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else if (responce == JOptionPane.CLOSED_OPTION){
                        Log.append("Database doesnt exist");
                    }
                }
            }
        }
    }//GEN-LAST:event_ConnectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Statement stmt = null;
        try(Connection con = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);){ 
            stmt = con.createStatement();
            ResultSet resultSet = stmt.executeQuery("SELECT * FROM DB_Log");
            jTable2.setModel(DbUtils.resultSetToTableModel(resultSet));
        } catch (SQLException e) {
            System.err.println(e);
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AEStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEStartActionPerformed
        // TODO add your handling code here:
        //GUI work
        AEStop.setEnabled(true);
        AEStart.setEnabled(false);
        Log.append("AE Data logging is started.\n");
        AEPort.setEnabled(false);
        AEDataLabel.setEnabled(true);
        //Start thread ODIM message reader
        AERSS = new AEMsgReader(AEPort_Value);
        AERSS.start();
    }//GEN-LAST:event_AEStartActionPerformed

    private void ODIMPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ODIMPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ODIMPortActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void DB_IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DB_IPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DB_IPActionPerformed

    private void AEPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEPortKeyReleased
        // TODO add your handling code here:
        props.put("AEPort", AEPort.getText());
        try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
            props.storeToXML(os, null);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
         getProperties();
    }//GEN-LAST:event_AEPortKeyReleased

    private void AEPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AEPortActionPerformed

    private void AEStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEStopActionPerformed
        //GUI work
        AEStop.setEnabled(false);
        AEStart.setEnabled(true);
        AEPort.setEnabled(true);
        Log.append("AE Data logging is stopped.\n");
        AEDataLabel.setEnabled(false);
        //Stop
        AERSS.done = false;
    }//GEN-LAST:event_AEStopActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataLogger().setVisible(true);
            }
        });
    }
    
    private void getProperties() {
        try {
            FileInputStream os = new FileInputStream("preferences.xml");
            props.loadFromXML(os);
            os.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        NavURLField.setText(props.getProperty("NavURL"));
        SealIP.setText(props.getProperty("Seal_IP"));
        SealPort.setText(props.getProperty("Seal_port"));
        ODIMPort.setText(props.getProperty("ODIMPort"));
        AEPort.setText(props.getProperty("AEPort"));
        DB_IP.setText(props.getProperty("IP"));
        DB_Uname.setText(props.getProperty("username"));
        DB_Pass.setText(props.getProperty("password"));
        //get varebles 
        ODIMPort_Value = Integer.valueOf(ODIMPort.getText());
        AEPort_Value = Integer.valueOf(AEPort.getText());
        SealPort_Value = Integer.valueOf(SealPort.getText());
        SealIP_Value = SealIP.getText();
        MySQLDB_IP = DB_IP.getText();
        USERNAME = DB_Uname.getText();
        PASSWORD = DB_Pass.getText();
        CONN_STRING = "jdbc:mysql://" + MySQLDB_IP + "/MIR";
        Log.append("Preferences loaded.\n");
    }

    private boolean checkForServer() {
        try{
            SocketAddress sockaddr = new InetSocketAddress(MySQLDB_IP, 3306);
            Socket sock = new Socket();
            sock.connect(sockaddr, 2000);
            //sock.setSoTimeout(3000);
            //Socket sock = new Socket(MySQLDB_IP, 3306);
            System.out.println("Avalibale");
            sock.close();
            Log.append("The Database Server is available\n");
            return true;
         }catch(java.io.IOException e) {
            System.out.println("error connection to " + MySQLDB_IP + "\n");        
            Log.append("Cannot connect to server " + MySQLDB_IP + " on port 3306. Check IP Address and conection");
            //------
            JOptionPane.showMessageDialog(null, "Cannot connect to server " + MySQLDB_IP + " on port 3306. Check IP Address and conection", "Message", JOptionPane.WARNING_MESSAGE);
            //------
            return false;
         }    
    }

    private boolean checkForDB() {
        boolean f = false;
        System.out.println("check ");
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://" + MySQLDB_IP, USERNAME, PASSWORD);
            DatabaseMetaData DMD = con.getMetaData();
            ResultSet rs = DMD.getCatalogs();
             Log.append("Looking for database schema ");
            while(rs.next()) {
                System.out.println(rs.getString(1));
                if (rs.getString(1).contains("MIR")) {
                    Log.append("\nThe Database schema in place\n");
                    SchemaLabel.setEnabled(true);
                    SchemaLabel.setForeground(Color.green);
                    f = true;
                    break;
                } else {
                    Log.append(" .");
                    f = false;
                    SchemaLabel.setEnabled(true);
                    SchemaLabel.setForeground(Color.red);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        return f;
    }
    
    private boolean checkPrefFile() {
        File f = new File("preferences.xml");
        if(f.exists()){
            getProperties();
            return true;
        }else{
            Log.append("no preferences file\nDefault settings are loaded");
            props.put("IP", "127.0.0.1");
            props.put("NavURL", "http://");
            props.put("Seal_IP", "127.0.0.1");
            props.put("Seal_port", "1478");
            props.put("ODIMPort", "2000");
            props.put("username", "root");
            props.put("password", "usersql");
          
            try (FileOutputStream os = new FileOutputStream("preferences.xml")) {
                props.storeToXML(os, null);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
            }
           // checkPrefFile();
           getProperties();
            return false;
        }
    }

    private void CreateDB() throws FileNotFoundException {
        Log.append("Create new Database");
        Statement stmt = null;
        Connection con = null;
        BufferedReader br = null;
        String sql = "";

        try {
            con = DriverManager.getConnection("jdbc:mysql://" + MySQLDB_IP, USERNAME, PASSWORD);
            stmt = con.createStatement();
            try {
                br = new BufferedReader(new FileReader("MIR_Schema.txt"));
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                    sql = sb.toString() + "\n";
                    if (sb.toString().contains(";")) {
                        System.out.println(sql);
                        System.out.println("-------");
                        stmt.executeUpdate(sql);
                       // line = "";
                        sql = "";
                       sb.setLength(0);
                    } 
                }
            } catch (IOException ex) {
                Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        checkForDB();
    checkEvents_and_Proceudre(); 
    }

    private void checkSchedule() {
        try(Connection con = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);){ 
                    Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery("show variables like 'event_scheduler' ");
                while (rs.next()) {
                    System.out.println("event_scheduler: " + rs.getString("Value"));
                   if(rs.getString("Value").contains("OFF")){
                       ScheduleLabel.setForeground(Color.red);
                       int responce = JOptionPane.showConfirmDialog(null, "Database routin jobs are not running. Would you like to start them", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if(responce == JOptionPane.NO_OPTION){
                            Log.append("Event Schadule is OFF");
                        } else if (responce == JOptionPane.YES_OPTION){
                            Statement stmt2 = null;
                            Connection con2 = null;
                            try {
                                con2 = DriverManager.getConnection("jdbc:mysql://" + MySQLDB_IP, USERNAME, PASSWORD);
                                stmt2 = con2.createStatement();
                                stmt2.executeUpdate("SET GLOBAL event_scheduler = ON;\n");
                                EventLabel.setEnabled(true);
                                EventLabel.setForeground(Color.GREEN);
                                
                            } catch (SQLException ex) {
                                Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            checkSchedule();
                        } else if (responce == JOptionPane.CLOSED_OPTION){
                            Log.append("Event Schadule is OFF\n");
                            EventLabel.setEnabled(true);
                            EventLabel.setForeground(Color.RED);
                        }
                   } 
                   if(rs.getString("Value").contains("ON")){
                       EventLabel.setEnabled(true);
                       ScheduleLabel.setForeground(Color.green);
                       Log.append("Event Schadule is ON\n");
                   } 
                }
            } catch (SQLException e) {
                System.err.println(e);
            }
    }
    
    private void checkEvents_and_Proceudre() {
        int c = 0;
        try(Connection con = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);){ 
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("show events");
            while (rs.next()) {
               System.out.println("event: " + rs.getString("Name"));
               c++;
            }
            //---
            if(c!=9){
                CreateEvents();
                EventLabel.setForeground(Color.red);
            } 
            if(c==9){
                EventLabel.setForeground(Color.green);
                Log.append("All Events are in place\n");
            } 
        } catch (SQLException e) {
            System.err.println(e);
        }
        checkSchedule();
    }
    
    private void CreateEvents() {
        BufferedReader br = null;
        String sql = "";
        String[] evFile = {"CLEANING_JOB", "CLEANING_JOB_CYCLE",
    "ODIM_AVG_tension_day_JOB", "odim_AVG_tension_minute_JOB", "ODIM_AVG_Tension_seq_JOB",
    "RVIMs_USAGE_JOB", "seal_AVG_tension_day_JOB", "seal_AVG_tension_minute_JOB", 
    "Seal_AVG_Tension_seq_JOB", "new_Str_config" };
        
        String[] events = new String[10];
        for(int i = 0; i < events.length; i++){
            try {
                br = new BufferedReader(new FileReader(evFile[i] + ".sql"));
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                    sql = sb.toString();
                    
                    } 
                events[i] = (sql);
                }
             catch (IOException ex) {
                Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //-------------------
        int responce = JOptionPane.showConfirmDialog(null, "Not enought events", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(responce == JOptionPane.NO_OPTION){
            Log.append("Event/Events doesn't exist");
        } else if (responce == JOptionPane.YES_OPTION){
            Statement stmt2 = null;
            Connection con2 = null;
            try {
                con2 = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);
                stmt2 = con2.createStatement();
                stmt2.addBatch("use MIR");
                for (int i = 0; i < 9; i++) {
                    stmt2.addBatch(events[i]);
                    System.out.println("ev: " + events[i]);
                }
               stmt2.executeBatch();

            } catch (SQLException ex) {
                Logger.getLogger(DataLogger.class.getName()).log(Level.SEVERE, null, ex);
            }
            checkEvents_and_Proceudre();
        } else if (responce == JOptionPane.CLOSED_OPTION){
            Log.append("Event/Events doesn't exist");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AEDataLabel;
    private javax.swing.JTextField AEPort;
    private javax.swing.JButton AEStart;
    private javax.swing.JButton AEStop;
    private javax.swing.JButton Connect;
    private javax.swing.JTextField DB_IP;
    private javax.swing.JTextField DB_Pass;
    private javax.swing.JTextField DB_Uname;
    private javax.swing.JLabel EventLabel;
    private javax.swing.JCheckBox ForwardCheckBox;
    private javax.swing.JTextArea Log;
    private javax.swing.JLabel NavDataLogging;
    private javax.swing.JButton NavStart;
    private javax.swing.JButton NavStopButton;
    private javax.swing.JTextField NavURLField;
    private javax.swing.JLabel ODIMDataLogLabel;
    private javax.swing.JTextField ODIMPort;
    private javax.swing.JButton ODIMStart;
    private javax.swing.JButton ODIMStop;
    private javax.swing.JLabel ScheduleLabel;
    private javax.swing.JLabel SchemaLabel;
    private javax.swing.JLabel SealDataLogLabel;
    private javax.swing.JTextField SealIP;
    private javax.swing.JTextField SealPort;
    private javax.swing.JButton SealStart;
    private javax.swing.JButton SealStop;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables


}
